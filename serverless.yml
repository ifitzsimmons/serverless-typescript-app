service: web-forum-ts
frameworkVersion: '2'

package:
  individually: true

plugins:
  - serverless-deployment-bucket

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: ${self:custom.profiles.${opt:stage, self:provider.stage, 'dev'}}
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt: [ForumThreads, Arn]
  environment:
    ForumTable:
      Ref: ForumThreads
    # For debugging purposes - maps exceptions back to TS file
    NODE_OPTIONS: --enable-source-maps
  deploymentBucket:
    name: ians-cf-templates
  versionFunctions: false
custom:
  profiles:
    dev: default
    prod: prodProfile

functions:
  CreateReply:
    handler: src/createReply.handler
    package:
      exclude:
        - src/**
      include:
        - src/CreateReply/*
  CreateForum:
    handler: src/CreateForum/createForum.handler
    package:
      exclude:
        - src/**
      include:
        - src/CreateForum/*

# you can add CloudFormation resource templates here
resources:
  Resources:
    ForumThreads:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ForumThreadsTS
        AttributeDefinitions:
          - AttributeName: partitionKey
            AttributeType: S
          - AttributeName: sortKey
            AttributeType: S
          - AttributeName: threadReplySortKey
            AttributeType: S
          - AttributeName: threadDatetimeSortKey
            AttributeType: S
        KeySchema:
          - AttributeName: partitionKey
            KeyType: HASH
          - AttributeName: sortKey
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ThreadsByTime
            KeySchema:
              - AttributeName: partitionKey
                KeyType: HASH
              - AttributeName: threadDatetimeSortKey
                KeyType: RANGE
            Projection:
              NonKeyAttributes:
                - ThreadTitle
                - Replies
                - LastUpdatedTime
              ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: ThreadsByReplies
            KeySchema:
              - AttributeName: partitionKey
                KeyType: HASH
              - AttributeName: threadReplySortKey
                KeyType: RANGE
            Projection:
              NonKeyAttributes:
                - ThreadTitle
                - Replies
                - LastUpdatedTime
              ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # IntegrationTestRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: /
    #     RoleName: IntegrationTestRole
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service:
    #               - lambda.amazonaws.com
    #           Action: sts:AssumeRole
    #     Policies:
    #       - PolicyName: InvokeLambdas
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement:
    #             - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
    #               Action:
    #                 - logs:CreateLogGroup
    #                 - logs:CreateLogStream
    #                 - logs:PutLogEvents
    #               Resource:
    #                 - 'Fn::Join':
    #                     - ':'
    #                     - - 'arn:aws:logs'
    #                       - Ref: 'AWS::Region'
    #                       - Ref: 'AWS::AccountId'
    #                       - 'log-group:/aws/lambda/*:*:*'
    #             - Effect: Allow
    #               Action: # Gives permission to DynamoDB tables in a specific region
    #                 - lambda:InvokeFunction
    #               Resource:
    #                 - Fn::GetAtt: [GetThreadLambdaFunction, Arn]
    #                 - Fn::GetAtt: [GetThreadsLambdaFunction, Arn]
    #                 - Fn::GetAtt: [EditThreadMessageLambdaFunction, Arn]
    #                 - Fn::GetAtt: [EditThreadTitleLambdaFunction, Arn]
    #                 - Fn::GetAtt: [CreateReplyLambdaFunction, Arn]
    #                 - Fn::GetAtt: [CreateThreadLambdaFunction, Arn]
